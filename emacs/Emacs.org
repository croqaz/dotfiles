#+TITLE: Emacs config
#+AUTHOR: Cristi Ctin
#+OPTIONS: html-style:nil toc:nil num:nil

* early-init.el
:PROPERTIES:
:header-args: :tangle ./early-init.el
:END:

#+begin_src emacs-lisp
;;; early-init.el --- Early Init File -*- lexical-binding: t -*-
;;
;; THIS FILE IS TANGLED, DON'T EDIT

;; Performance improvements
(setq gc-cons-threshold most-positive-fixnum)

;; Disable some visual elements early
(add-to-list 'default-frame-alist '(border-width . 0))
(add-to-list 'default-frame-alist '(tool-bar-lines . 0))
(add-to-list 'default-frame-alist '(menu-bar-lines . 0))
(add-to-list 'default-frame-alist '(vertical-scroll-bars . nil))
(add-to-list 'default-frame-alist '(horizontal-scroll-bars . nil))
;; Disable all WM decorations (maybe)
;; (add-to-list 'default-frame-alist '(undecorated . t))

;; Ignore X resources
(advice-add #'x-apply-session-resources :override #'ignore)

;; Don't init `package.el', using `straight.el' instead
(setq package-enable-at-startup nil)

;; Inhibits loading the default library
(setq inhibit-default-init t)

;; Font compacting can be very expensive
(setq inhibit-compacting-font-caches t)

;; Inhibit resizing frame
(setq frame-inhibit-implied-resize t)

;; Frame sizes can increase/decrease by one pixel
(setq frame-resize-pixelwise t)

;; Disable startup features
(setq inhibit-splash-screen t
      inhibit-startup-screen t
      inhibit-startup-message t
      initial-scratch-message ";; scratch\n")

;; Auto-compile options
(setq load-prefer-newer t)

;; THIS FILE IS TANGLED, DON'T EDIT
;;
;;; early-init.el ends here
#+end_src

* init.el
:PROPERTIES:
:header-args: :tangle ./init.el
:END:

** Basic variables

#+begin_src emacs-lisp
;;; init.el -*- lexical-binding: t; -*-
;;
;; THIS FILE IS TANGLED, DON'T EDIT

(setq user-full-name "Cristi Ctin"
      user-mail-address "john@doe.com")

(defconst my-emacs-d (file-name-as-directory user-emacs-directory)
  "My emacs.d folder.")

(defconst my-lisp-dir (concat my-emacs-d "lisp")
  "My lisp folder.")

;; Disable novice, all commands work normally
(setq-default disabled-command-function nil)

;; UTF encoding everywhere
(set-keyboard-coding-system  'utf-8)
(set-selection-coding-system 'utf-8)
(set-terminal-coding-system  'utf-8)
(prefer-coding-system 'utf-8)

;; No auto-save, backups or lockfiles
(setq auto-save-default nil
      backup-by-copying t
      create-lockfiles nil
      delete-old-versions t
      make-backup-files nil
      backup-inhibited t)
#+end_src

** GUI features

#+begin_src emacs-lisp
;; Supress GUI features
(when (featurep 'tooltip)    (tooltip-mode 0))
(when (featurep 'tool-bar)   (tool-bar-mode 0))
(when (featurep 'menu-bar)   (menu-bar-mode 0))
(when (featurep 'scroll-bar) (scroll-bar-mode 0))
(setq use-dialog-box nil)
(setq use-file-dialog nil)

;; Space on the left side, for git gutter
(set-fringe-mode '(5 . 0))

;; Set window title
(setq-default frame-title-format '("%F - %b"))
#+end_src

** Fonts

#+begin_src emacs-lisp
(setq my-font "JetBrains Mono Light")
(set-face-attribute 'default nil :family my-font :height 108)
(set-face-attribute 'fixed-pitch nil :family my-font :height 108)
(set-face-attribute 'variable-pitch nil :family "Inter Light" :height 108)
(set-frame-font my-font nil t)

;; Display symbols and emojis
(set-fontset-font t 'unicode (font-spec :family "Noto Sans Symbols") nil 'prepend)
(set-fontset-font t 'symbol (font-spec :family "Noto Color Emoji") nil 'prepend)
#+end_src

** Buffers

Nicer buffer naming, for files with identical names.
Other small aesthetic improvements.

#+begin_src emacs-lisp
(setq uniquify-buffer-name-style 'reverse
      uniquify-separator " • "
      uniquify-ignore-buffers-re "^\\*")

;; Show a symbol at the start and end of the buffer
(setq indicate-buffer-boundaries '((top . left) (bottom . left)))
;; Hide cursor in other windows
(setq-default cursor-in-non-selected-windows nil)

;; Don't stretch the cursor to fit wide characters
(setq-default x-stretch-cursor nil)
#+end_src

** Scrolling

#+begin_src emacs-lisp
;; Performant rapid scrolling
(setq-default fast-but-imprecise-scrolling t
              mouse-wheel-progressive-speed nil
              mouse-wheel-scroll-amount '(2 ((shift) . hscroll)))

;; More scroll settings
(setq scroll-margin 1
      scroll-conservatively 0
      auto-window-vscroll nil)

;; Disable bidirectional writing
(setq bidi-inhibit-bpa t)
(setq-default bidi-display-reordering 'left-to-right
              bidi-paragraph-direction 'left-to-right)
#+end_src

** Kill ring

#+begin_src emacs-lisp
;; Reduce bloat from kill-ring
(setq kill-do-not-save-duplicates t)

;; Max len of kill-ring before old elements are thrown away
(setq kill-ring-max 100)
  #+end_src

** Editing

#+begin_src emacs-lisp
;; Spaces vs tabs
(setq-default indent-tabs-mode nil
              tab-always-indent nil
              default-tab-width 4
              tab-width 4
              tab-stop-list (number-sequence 4 120 4))

(setq electric-pair-pairs '((?\{ . ?\})
                            (?\( . ?\))
                            (?\[ . ?\])
                            (?\" . ?\")
                            ))

(add-hook 'emacs-startup-hook
          (lambda ()
            ;; Visualize matching parens
            (show-paren-mode t)
            ;; Auto-match parentheses
            (electric-pair-mode t)
            ))
#+end_src

** Packages

Install packages with straight.el and use-package.el.

#+begin_src emacs-lisp
;; Enable/ disable debug
(setq init-file-debug nil)

(setq package-enable-at-startup nil
      straight-use-package-by-default t
      straight-check-for-modifications nil
      straight-vc-git-default-clone-depth 1
      straight-vc-git-default-protocol 'https)

;; straight bootstrap code
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

;; use-package initialization
(if init-file-debug
    (setq use-package-verbose t
          use-package-expand-minimally nil
          use-package-compute-statistics t
          debug-on-error t)
  (setq use-package-verbose nil
        use-package-expand-minimally t))

;; straight integration with use-package
(straight-use-package 'use-package)
(eval-when-compile (require 'use-package))

;; Useful macro
(defmacro use-feature (name &rest args)
  "Like `use-package' but with straight and ensure disabled.
NAME and ARGS are in `use-package'."
  (declare (indent defun))
  `(use-package ,name
     :straight nil
     :ensure nil
     ,@args))
#+end_src

** Async lib

Asynchronous processing lib. Not sure if it does anything...?

#+begin_src emacs-lisp
(use-package async
  :demand t
  :config
  (dired-async-mode t)
  (async-bytecomp-package-mode t))
#+end_src

** Theme

#+begin_src emacs-lisp
;; (disable-theme)
(use-package modus-themes
  :init
  (setq modus-themes-italic-constructs t
        modus-themes-bold-constructs t
        modus-themes-fringes 'subtle
        modus-themes-no-mixed-fonts t
        modus-themes-scale-headings t
        modus-themes-subtle-line-numbers t)
  (setq modus-themes-mode-line '(accented 3d))
  (setq modus-themes-org-blocks 'gray-background)
  (setq modus-themes-syntax '(faint))
  (setq modus-themes-links '(faint neutral-underline))
  (setq modus-themes-inhibit-reload nil)
  ;; Load the theme files before enabling a theme
  (modus-themes-load-themes)
  :custom
  (modus-themes-operandi-color-overrides
   '((bg-main . "#f3f9f3")
     (bg-dim . "#f1f5f1")
     (bg-alt . "#e8e8e8")
     (bg-hl-line . "#eaeaef")
     (bg-active . "#e0e0e0")
     (bg-inactive . "#e6e6e6")
     (bg-region . "#b5b5b5")
     (bg-header . "#e4e4e4")
     (bg-tab-bar . "#c3c9c3")
     (bg-tab-active . "#f5f5f5")
     (bg-tab-inactive . "#c0c0c0")))

  ;; (darktooth-dark0_hard    . "#1D2021")
  ;; (darktooth-dark0         . "#282828")
  ;; (darktooth-dark0_soft    . "#32302F")
  ;; (darktooth-dark1         . "#3C3836")
  ;; (darktooth-dark2         . "#504945")
  ;; (darktooth-dark3         . "#665C54")
  ;; (darktooth-dark4         . "#7C6F64")

  ;; (darktooth-light0_hard   . "#FFFFC8")
  ;; (darktooth-light0        . "#FDF4C1")
  ;; (darktooth-light0_soft   . "#F4E8BA")
  ;; (darktooth-light1        . "#EBDBB2")
  ;; (darktooth-light2        . "#D5C4A1")
  ;; (darktooth-light3        . "#BDAE93")
  ;; (darktooth-light4        . "#A89984")

  ;; (darktooth-white          . "#FFFFFF")
  ;; (darktooth-black          . "#000000")
  ;; (darktooth-sienna         . "#DD6F48")
  ;; (darktooth-darkslategray4 . "#528B8B")
  ;; (darktooth-lightblue4     . "#66999D")
  ;; (darktooth-burlywood4     . "#BBAA97")
  ;; (darktooth-aquamarine4    . "#83A598")
  ;; (darktooth-turquoise4     . "#61ACBB")

  (modus-themes-vivendi-color-overrides
   '((bg-main . "#282828")
     (fg-main . "#FDF4C1")
     ))
  :config
  (modus-themes-load-operandi))
#+end_src

** Files

#+begin_src emacs-lisp
;; Builtin dired config
(use-feature dired
  :init
  ;; Always delete and copy recursively
  (setq dired-recursive-deletes 'top
        dired-recursive-copies 'always
        dired-dwim-target t
        ;; Ask if destination dirs should get created when copying/removing
        dired-create-destination-dirs 'ask
        ;; Human readable units
        dired-listing-switches "-alh -v --group-directories-first")
  (setq image-dired-thumb-size 128)
  :hook
  (dired-mode . (lambda () (centaur-tabs-local-mode t)))
  :config
  (define-key dired-mode-map (kbd "RET") 'dired-find-alternate-file)
  (define-key dired-mode-map (kbd "^") (lambda () (find-alternate-file ".."))))

(use-feature dired-x
  :init
  (setq dired-omit-verbose nil
        dired-clean-confirm-killing-deleted-buffers nil))

;; Ranger instead of Dired
;;
(use-package ranger
  :after dired
  :hook
  (ranger-mode . (lambda () (centaur-tabs-local-mode t)))
  :init
  (setq ranger-cleanup-on-disable t
        ranger-cleanup-eagerly t
        ranger-deer-show-details t
        ranger-max-preview-size 10
        ranger-modify-header nil
        ranger-show-literal nil
        ranger-hide-cursor nil)
  :config
  (ranger-override-dired-mode t))
#+end_src

** Terminal

#+begin_src emacs-lisp
;; Use zsh as default term shell
(setq-default shell-file-name "zsh"
              explicit-shell-file-name "zsh")

;; (use-package vterm
;;   :defer t
;;   :commands (vterm vterm-other-window)
;;   :bind
;;   (:map vterm-mode-map
;;         ("C-c C-c" . vterm-send-C-c))
;;   :config
;;   (evil-set-initial-state 'vterm-mode 'emacs))
#+end_src

** Editing

#+begin_src emacs-lisp
;; Enable visual-line, line and column almost everywhere
;;
(use-feature simple
  :defer t
  :custom
  (fill-column 100)
  (display-line-numbers-grow-only t)
  (display-line-numbers-type 'absolute)
  (display-line-numbers-widen t)
  (display-line-numbers-width 3)
  :hook
  (prog-mode . visual-line-mode)
  (text-mode . visual-line-mode)
  (prog-mode . display-line-numbers-mode)
  (text-mode . display-line-numbers-mode)
  (prog-mode . column-number-mode)
  (text-mode . column-number-mode))

;; Highlight space-like characters
;;
(use-feature whitespace
  :defer t
  :custom
  (whitespace-style '(face tabs empty trailing))
  :hook
  (text-mode . whitespace-mode)
  (prog-mode . whitespace-mode)
  ;; Trim whitespaces on save
  (before-save . delete-trailing-whitespace))

;; disable with:
;; (remove-hook 'before-save-hook 'delete-trailing-whitespace)

;; Highlight the current line
;;
(use-feature hl-line
  :defer t
  :hook
  (prog-mode . hl-line-mode)
  (text-mode . hl-line-mode)
  :custom
  (hl-line-sticky-flag nil))

;; Automatically refresh the buffer when the file changes
;;
(use-feature autorevert
  :init
  ;; Only rely on the OS notification mechanism
  (setq auto-revert-avoid-polling t
        auto-revert-verbose t)
  :config
  (global-auto-revert-mode t))
#+end_src

** EVIL 😈

#+begin_src emacs-lisp
(use-package undo-fu)

;; (use-feature hideshow
;;   :commands (hs-toggle-hiding
;;              hs-hide-block
;;              hs-hide-level
;;              hs-show-all
;;              hs-hide-all))

(use-package origami
  :hook
  (prog-mode . origami-mode)
  (text-mode . origami-mode))

(use-package evil
  :init
  (setq evil-respect-visual-line-mode t
        evil-kill-on-visual-paste nil
        evil-shift-width 2
        evil-undo-system 'undo-fu
        evil-kbd-macro-suppress-motion-error t
        evil-move-cursor-back nil
        evil-split-window-below  t  ;; move cursor below after split
        evil-vsplit-window-right t  ;; move cursor right after split
        evil-want-fine-undo   t     ;; remember changes in insert mode
        evil-want-integration t     ;; load evil-integration
        evil-want-Y-yank-to-eol t
        evil-want-keybinding nil)
  :config
  (evil-define-key 'normal 'global "zx" #'kill-current-buffer)
  (evil-define-key 'visual 'global "g<" #'evil-visual-shift-left)
  (evil-define-key 'visual 'global "g>" #'evil-visual-shift-right)
  (evil-define-key 'normal 'global [mouse-8] #'evil-jump-backward)
  (evil-define-key 'normal 'global [mouse-9] #'evil-jump-forward)
  (evil-mode t))

(use-package evil-collection
  :after evil
  :custom
  (evil-collection-mode-list '(dired
                               flycheck
                               apropos
                               help
                               helpful
                               info
                               magit
                               man
                               simple
                               ))
  :config
  (evil-collection-init))

(defun evil-visual-shift-left()
  (interactive)
  ;; (call-interactively #'evil-shift-left)
  (evil-shift-left (region-beginning) (region-end))
  (evil-normal-state)
  (evil-visual-restore))

(defun evil-visual-shift-right()
  (interactive)
  ;; (call-interactively #'evil-shift-right)
  (evil-shift-right (region-beginning) (region-end))
  (evil-normal-state)
  (evil-visual-restore))

;; Will re-use these keys
(with-eval-after-load 'evil-maps
  (define-key evil-motion-state-map (kbd "SPC") nil)
  (define-key evil-motion-state-map (kbd "RET") nil))

;; (use-package vimish-fold
;;   :after evil)

;; (use-package evil-vimish-fold
;;   :after vimish-fold
;;   :hook ((text-mode conf-mode prog-mode) . evil-vimish-fold-mode)
;;   :init
;;   (setq vimish-fold-indication-mode 'right-fringe))

;; Select and edit matches interactively
;; Use C-n for next and C-p for previous regions
;;
(use-package evil-multiedit
  :after evil
  :config
  ;; Match the word under cursor (i.e. make it an edit region)
  ;; Consecutive presses will incrementally add the next unmatched match
  (define-key evil-normal-state-map (kbd "M-d") 'evil-multiedit-match-and-next)
  ;; Match selected region
  (define-key evil-visual-state-map (kbd "M-d") 'evil-multiedit-match-and-next)
  ;; Insert marker at point
  (define-key evil-insert-state-map (kbd "M-d") 'evil-multiedit-toggle-marker-here)
  ;; Same as M-d but in reverse
  (define-key evil-normal-state-map (kbd "M-D") 'evil-multiedit-match-and-prev)
  (define-key evil-visual-state-map (kbd "M-D") 'evil-multiedit-match-and-prev))

(use-package evil-surround
  :after evil
  :config
  (global-evil-surround-mode t))

(use-package evil-commentary
  :after evil
  :config
  (evil-commentary-mode t))

(use-package expand-region
  :after evil
  :config
  (define-key evil-normal-state-map (kbd "C-=") 'er/expand-region)
  (define-key evil-visual-state-map (kbd "C-=") 'er/expand-region)
  (define-key evil-visual-state-map (kbd "C--") 'er/contract-region))

;; Pretty eye candy 🍬
;; Visual hints when editing with evil
;;
(use-package evil-goggles
  :after evil
  :config
  (evil-goggles-mode)
  (evil-goggles-use-diff-faces))
#+end_src

** Completion

Company is a text completion framework for Emacs. The name stands for "complete anything".
It uses pluggable back-ends and front-ends to retrieve and display completion candidates.

#+begin_src emacs-lisp
(use-package company
  :defer 5
  :hook
  ;; (text-mode . company-mode)
  (prog-mode . company-mode)
  :init
  (setq company-minimum-prefix-length 2
        company-require-match 'never
        company-selection-wrap-around t
        company-tooltip-align-annotations t
        company-dabbrev-ignore-case t
        company-tooltip-limit 14
        company-tooltip-maximum-width 50
        company-global-modes
        '(not message-mode
              help-mode
              vterm-mode
              minibuffer-inactive-mode)
        company-frontends
        '(company-pseudo-tooltip-frontend ;; always show candidates in overlay tooltip
          company-echo-metadata-frontend) ;; show selected candidate docs in echo area
        company-auto-complete nil
        company-auto-complete-chars nil))
#+end_src

** Snippets

#+begin_src emacs-lisp
(use-package yasnippet
  :disabled
  ;; :commands yas-global-mode
  :custom
  (yas-verbosity 3))

;; Loading the doom snippets takes forever
;; (use-package doom-snippets
;;   :after yasnippet
;;   :hook (window-setup . yas-reload-all)
;;   :straight (:host github :repo "hlissner/doom-snippets" :files ("*.el" "*")))

;; Useful for quick snippets!
;; (use-package auto-yasnippet
;;   :defer t)
#+end_src

** Utilities

#+begin_src emacs-lisp
;; Very helpful
(use-package helpful
  :defer 2
  :commands (helpful-callable
             helpful-function
             helpful-variable
             helpful-key
             helpful-macro
             helpful-command)
  :init
  (setq apropos-do-all t)
  :custom
  ;; Integrate with counsel
  (counsel-describe-function-function  #'helpful-callable)
  (counsel-describe-symbol-function    #'helpful-symbol)
  (counsel-describe-variable-function  #'helpful-variable))

;; Incredibly useful
(use-package which-key
  :defer 3
  :hook (after-init . which-key-mode)
  :init
  (setq which-key-sort-order 'which-key-key-order-alpha
        which-key-sort-uppercase-first nil
        which-key-popup-type 'minibuffer
        which-key-add-column-padding 2
        which-key-allow-evil-operators t
        which-key-idle-delay 1.5
        which-key-min-display-lines 5
        which-key-side-window-slot -10
        which-key-show-operator-state-maps t))

(use-package ivy
  :hook (after-init . ivy-mode)
  :init
  (setq ivy-wrap t
        ivy-fixed-height-minibuffer t
        ivy-sort-max-size 7500
        ivy-use-selectable-prompt t
        ivy-use-virtual-buffers t))

(use-package counsel
  :after ivy
  :config
  (counsel-mode t))

(use-package all-the-icons-ivy-rich
  :after ivy
  :config
  (all-the-icons-ivy-rich-mode t))

(use-package ivy-rich
  :after ivy
  :init
  (setq ivy-rich-parse-remote-buffer nil)
  :config
  (ivy-rich-mode t)
  (ivy-rich-project-root-cache-mode t))
#+end_src

Save recent files, history and sessions.

#+begin_src emacs-lisp
;; Recent files
;;
(use-package recentf
  :hook (emacs-startup . recentf-mode)
  :init
  (setq recentf-auto-cleanup 'never
        recentf-max-menu-items 50
        recentf-max-saved-items 1000
        recentf-save-file (expand-file-name "etc/recentf" my-emacs-d)
        recentf-exclude
        '("\\.?cache" ".cask" "url" "bookmarks" "COMMIT_EDITMSG\\'"
          "\\.\\(?:gz\\|zip\\|svg\\|gif\\|png\\|jpe?g\\|bmp\\|xpm\\)$"
          "\\.last$" "/G?TAGS$" "/.elfeed/" "~$" "\\.log$"
          "^/ssh:" "^/tmp/" "^/var/folders/" "^/usr/lib/" "^/Dev/dotfiles/emacs/"
          (lambda (file) (file-in-directory-p file package-user-dir))))
  :config
  (push (expand-file-name recentf-save-file) recentf-exclude)
  (add-to-list 'recentf-filename-handlers #'abbreviate-file-name))
#+end_src

#+begin_src emacs-lisp
;; Persist variables across sessions
;;
(use-package savehist
  :hook (emacs-startup . savehist-mode)
  :init
  (setq savehist-additional-variables
        '(kill-ring                        ; persist clipboard
          register-alist                   ; persist macros
          search-ring regexp-search-ring)) ; persist searches
  (setq history-length 10000
        savehist-autosave-interval nil     ; save on kill only
        savehist-save-minibuffer-history t
        savehist-file (expand-file-name "etc/savehist" my-emacs-d)))
#+end_src

#+begin_src emacs-lisp
;; Save Emacs Session
;;
(use-feature desktop
  :hook
  (after-init . desktop-save-mode)
  (after-init . desktop-read)
  :init
  (setq desktop-files-not-to-save "^$"
        desktop-base-file-name "desktop"
        desktop-restore-eager 5
        desktop-restore-frames nil
        desktop-load-locked-desktop t
        desktop-path '("~/.emacs.default/etc" "~" "."))
  :config
  (add-to-list 'desktop-modes-not-to-save 'dired-mode)
  (add-to-list 'desktop-modes-not-to-save 'help-mode)
  (add-to-list 'desktop-modes-not-to-save 'info-mode)
  (add-to-list 'desktop-modes-not-to-save 'magit-mode)
  (add-to-list 'desktop-modes-not-to-save 'simple-mode)
  (add-to-list 'desktop-modes-not-to-save 'special-mode)
  (add-to-list 'desktop-modes-not-to-save 'fundamental-mode)
  (add-to-list 'desktop-modes-not-to-save 'completion-list-mode))
#+end_src

** Org-mode

#+begin_src emacs-lisp
(use-package org
  :defer t
  :init
  (setq org-modules nil ;; Faster loading
        org-directory "~/org/"
        ;; Show entities in \name form
        org-pretty-entities nil
        org-hide-emphasis-markers t
        org-fontify-whole-heading-line t
        org-edit-src-content-indentation 0
        org-tags-column -66
        ;; invisible region before inserting or deleting a char
        org-catch-invisible-edits 'smart
        ;; shift-cursor commands select text when possible
        org-support-shift-select t
        ;; Link is to the current directory below, otherwise fully qualify the link
        org-link-file-path-type 'relative
        ;; Keep track of when a certain TODO item was marked as done
        org-log-done 'time
        ;; No TOC
        org-export-with-toc nil
        ;; Turn on native code fontification
        org-confirm-babel-evaluate nil
        org-src-fontify-natively t
        org-src-tab-acts-natively t
        org-cycle-separator-lines 1
        ;; Indentation per level in number of characters
        org-indent-indentation-per-level 1
        ;; Turn on indent for all org files
        org-startup-indented t
        ;; interpret "_" and "^" for display
        org-use-sub-superscripts '{})
  :config
  ;; Enable org structure templates
  (add-to-list 'org-modules 'org-tempo t)
  ;; Add a few more templates
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("js" . "src javascript"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  ;; Enable these babel languages:
  (org-babel-do-load-languages
   'org-babel-load-languages '(
                               (emacs-lisp . t)
                               (shell . t)
                               (python . t)
                               (ruby . t))
   ))

(use-package evil-org
  :after org
  :hook ((org-mode . evil-org-mode)))

;; Org publish projects
(setq org-publish-project-alist
      '(("memex"
         :base-directory "~/org/mem/"
         :base-extension "org"
         :publishing-directory "/tmp/mem/"
         :publishing-function org-html-publish-to-html
         :html-doctype "html5"
         :html-head ""
         :html-head-extra ""
         :html-head-include-default-style nil
         :html-head-include-scripts nil
         :html-link-home ""
         :html-link-up ""
         :html-postamble nil
         :html-preamble nil
         :html-style nil
         :html-use-infojs nil
         :html-xml-declaration nil
         :section-numbers nil
         :with-creator nil
         :with-timestamps nil
         :with-title nil
         :with-toc nil)))
#+end_src

** Markdown

#+begin_src emacs-lisp
(use-package markdown-mode
  :defer t
  :mode ("README\\(?:\\.md\\)?\\'" . gfm-mode)
  :commands (markdown-mode gfm-mode)
  :init
  (setq markdown-command "multimarkdown"
        markdown-asymmetric-header t
        markdown-italic-underscore t
        markdown-fontify-code-blocks-natively t
        markdown-make-gfm-checkboxes-buttons t))

(use-package evil-markdown
  :straight (:type git :host github :repo "Somelauw/evil-markdown")
  :after markdown
  :hook ((markdown-mode . evil-markdown-mode)))
#+end_src

** VCS

#+begin_src emacs-lisp
(defun +magit/quit-all ()
  "Kill all magit buffers for the current repository."
  (interactive)
  (mapc #'+magit--kill-buffer (magit-mode-get-buffers))
  (+magit-mark-stale-buffers-h))

(defun +magit--kill-buffer (buf)
  (when (and (bufferp buf) (buffer-live-p buf))
    (let ((process (get-buffer-process buf)))
      (if (not (processp process))
          (kill-buffer buf)
        (with-current-buffer buf
          (if (process-live-p process)
              (run-with-timer 5 nil #'+magit--kill-buffer buf)
            (kill-process process)
            (kill-buffer buf)))))))

(use-package magit
  :init
  (setq magit-refresh-status-buffer nil
        magit-save-repository-buffers nil
        magit-revision-insert-related-refs nil
        magit-bury-buffer-function #'magit-mode-quit-window)
  :config
  ;; Clean up after magit by killing leftover magit buffers and reverting
  ;; affected buffers (or at least marking them as need-to-be-reverted).
  (define-key magit-mode-map "Q" #'+magit/quit-all)
  ;; Close transient with ESC
  (define-key transient-map [escape] #'transient-quit-one)
  ;; Jump on the other window
  (define-key magit-hunk-section-map (kbd "S-<return>") 'magit-diff-visit-file-other-window)

  ;; Add additional switches
  (transient-append-suffix 'magit-fetch "-p"
    '("-t" "Fetch all tags" ("-t" "--tags")))
  (transient-append-suffix 'magit-pull "-r"
    '("-a" "Autostash" "--autostash")))
#+end_src

#+begin_src emacs-lisp
;; Use keychain ENV, don't ask for passwords
;;
(use-package keychain-environment
  :after magit
  :hook (after-init . keychain-refresh-environment))

(use-package git-gutter-fringe
  :after magit
  :init
  (setq indicate-buffer-boundaries nil
        indicate-empty-lines nil)
  (setq git-gutter:disabled-modes '(fundamental-mode
                                    help-mode
                                    vterm-mode
                                    image-mode
                                    pdf-view-mode
                                    ))
  ;; Only enable the backends that are available, so it doesn't have to check
  ;; when opening each buffer
  (setq git-gutter:handled-backends
        (cons 'git (cl-remove-if-not
                    #'executable-find (list 'hg 'svn 'bzr)
                    :key #'symbol-name)))
  :config
  ;; Thin fringe bitmaps
  (define-fringe-bitmap 'git-gutter-fr:added
    [224] nil nil '(top repeated))
  (define-fringe-bitmap 'git-gutter-fr:modified
    [224] nil nil '(top repeated))
  (define-fringe-bitmap 'git-gutter-fr:deleted
    [128 192 224 240] nil nil 'bottom)

  ;; Enable only for specific modes
  (add-hook 'prog-mode-hook 'git-gutter-mode)
  (add-hook 'text-mode-hook 'git-gutter-mode)

  ;; Update git-gutter on focus (in case of using git externally)
  (add-hook 'focus-in-hook #'git-gutter:update-all-windows)
  ;; Update git-gutter when using magit commands
  (advice-add #'magit-stage-file   :after #'+vc-gutter-update-h)
  (advice-add #'magit-unstage-file :after #'+vc-gutter-update-h))
#+end_src

** Lisp & Sly

#+begin_src emacs-lisp
;; (use-package sly
;;   :defer t
;;   :init
;;   (setq inferior-lisp-program "sbcl --noinform")
;;   :config
;;   (setq sly-kill-without-query-p t
;;         sly-net-coding-system 'utf-8-unix))

;; (use-package sly-repl-ansi-color
;;   :defer t
;;   :init
;;   (add-to-list 'sly-contribs 'sly-repl-ansi-color))
#+end_src

** Checkers

I only use Flycheck for programming modes and I specifically call it.

#+begin_src emacs-lisp
(use-package flycheck
  :defer 3
  :init
  ;; Don't recheck on idle too often
  (setq flycheck-idle-change-delay 2.5)
  ;; Display errors a little quicker
  (setq flycheck-display-errors-delay 0.5))

;; Emacs Language Server Protocol client
;; https://emacs-lsp.github.io/lsp-mode
(use-package lsp-mode
  :commands (lsp lsp-deferred)
  :hook
  (lsp-mode . lsp-enable-which-key-integration)
  :custom
  (lsp-diagnostics-provider :flycheck)
  (lsp-enable-text-document-color nil)
  (lsp-headerline-breadcrumb-enable t)
  (lsp-headerline-breadcrumb-segments '(project file symbols))
  (lsp-lens-enable nil)
  (lsp-ui-doc-enable nil)
  (lsp-ui-doc-show-with-cursor nil)
  :init
  (setq lsp-keymap-prefix "C-c l") ;; Or 'C-l', 's-l'
  :config
  ;; ignore folders like .git, node_modules, and also:
  (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]\\.mypy_cache\\'")
  (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]\\.pytest_cache\\'")
  (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]\\data\\'"))

;; (use-package lsp-ivy
;;   :after lsp-mode)
#+end_src

** Python

Using the builtin Python mode + Elpy.
I'm not entirely sure if I need both.

#+begin_src emacs-lisp
;; The package is "python" but the mode is "python-mode"
(use-feature python
  :defer t
  :mode ("\\.py\\'" . python-mode)
  :hook
  (python-mode . flycheck-mode)
  (python-mode . company-mode)
  (python-mode . yas-minor-mode)
  :config
  (setq evil-shift-width 4
        python-indent 4
        python-indent-offset 4)
  (setq python-shell-interpreter "ipython"
        python-shell-interpreter-args "-i --colors=Linux --no-confirm-exit"))

;; https://github.com/microsoft/pyright
(use-package lsp-pyright
  :hook
  (python-mode . (lambda ()
                   (require 'lsp-pyright)
                   (lsp-deferred))))

(defun yapf-fmt-code ()
  "Simple format Python region, or buffer with YAPF."
  (interactive)
  (let (beg end)
    (if (region-active-p)
        (setq beg (region-beginning)
              end (region-end))
      (setq beg (point-min)
            end (point-max)))
    (shell-command-on-region
     beg end "yapf --style='{based_on_style:pep8, column_limit:120}'"
     nil t)))
#+end_src

** Javascript

#+begin_src emacs-lisp
(use-package js2-mode
  :defer t
  :mode ("\\.js\\'" . js2-mode)
  :hook (js2-mode . lsp-deferred)
  :init
  (setq evil-shift-width 4
        javascript-indent-level 4
        typescript-indent-level 4)
  (setq js2-mode-assume-strict t
        js2-mode-show-strict-warnings nil
        js2-strict-missing-semi-warning nil
        js2-strict-trailing-comma-warning nil))

(use-package typescript-mode
  :defer t
  :mode ("\\.ts\\'" . typescript-mode)
  :hook (typescript-mode . lsp-deferred)
  :init
  (setq javascript-indent-level 4
        typescript-indent-level 4))

(use-package web-mode
  :defer t
  :mode ("\\.html?\\'" . web-mode)
  :init
  (setq web-mode-enable-html-entities-fontification t
        web-mode-enable-current-element-highlight t
        web-mode-enable-current-column-highlight t
        web-mode-auto-close-style 1
        web-mode-css-indent-offset 2
        web-mode-code-indent-offset 2
        web-mode-markup-indent-offset 2
        web-mode-block-padding 0
        web-mode-style-padding 0
        web-mode-script-padding 0))

(defun prettier-js-fmt-code ()
  "Simple format region or buffer, with Prettier."
  (interactive)
  (let (beg end)
    (if (region-active-p)
        (setq beg (region-beginning)
              end (region-end))
      (setq beg (point-min)
            end (point-max)))
    (shell-command-on-region
     beg end "prettier --single-quote --tab-width 4 --print-width 120 --trailing-comma all --stdin-filepath script.js"
     nil t)))

(defun standard-js-fmt-code ()
  "Simple format region or buffer, with Standard."
  (interactive)
  (let (beg end)
    (if (region-active-p)
        (setq beg (region-beginning)
              end (region-end))
      (setq beg (point-min)
            end (point-max)))
    (shell-command-on-region
     beg end "standard --stdin --global --fix"
     nil t)))
#+end_src

#+begin_src emacs-lisp
(use-package yaml-mode
  :defer t
  :mode ("\\.ya?ml\\'" . yaml-mode))

;; (use-package pug-mode
;;   :defer t
;;   :mode ("\\.pug\\'" . pug-mode))
#+end_src

** Go

#+begin_src emacs-lisp
;; (use-package go-mode
;;   :defer t
;;   :mode ("\\.go\\'" . go-mode)
;;   :hook (go-mode . lsp-deferred))
#+end_src

** LUA

#+begin_src emacs-lisp
;; (use-package lua-mode
;;   :defer t
;;   :mode ("\\.lua\\'" . lua-mode))
#+end_src

** Docker

#+begin_src emacs-lisp
(use-feature text-mode
  :defer t
  :mode ("/Dockerfile\\(?:\\.[^/\\]*\\)?\\'" . text-mode))
#+end_src

** Keybindings

#+begin_src emacs-lisp
;; I don't want ESC as a modifier
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)

(defun switch-to-previous-buffer ()
  (interactive)
  (switch-to-buffer (other-buffer (current-buffer) 1)))

(use-package general
  :demand t
  :config
  (general-create-definer global-definer
    :keymaps 'override
    :prefix  "SPC"
    :non-normal-prefix "C-SPC"
    :states  '(normal visual))
  (global-definer
    ;; unbind SPC and give it a title for which-key
    ""  '(nil :which-key "Lieutenant General prefix")
    "!"  'shell-command
    ";"  'eval-expression
    ":"  'counsel-M-x
    "."  'counsel-projectile-find-file
    "u"  '(universal-argument :wk "universal")
    "SPC" 'counsel-file-jump
    ;;
    "b" '(:ignore t :wk "Buffer")
    "b TAB" 'switch-to-previous-buffer
    "bB"  'ibuffer-other-window
    "bI"  'counsel-ibuffer
    "bM"  '((lambda () (interactive) (switch-to-buffer "*Messages*")) :wk "switch to Messages")
    "bS"  '((lambda () (interactive) (switch-to-buffer "*scratch*")) :wk "switch to Scratch")
    "bb"  'counsel-switch-buffer
    "bk"  'kill-buffer
    "bn"  'next-buffer
    "bp"  'previous-buffer
    "br"  'revert-buffer
    "bx"  'kill-current-buffer
    ;;
    "c" '(:ignore t :wk "Comment")
    "cl"  'comment-line
    "cr"  'comment-or-uncomment-region
    ;;
    "F" '(:ignore t :wk "Frame")
    "FD"  'delete-other-frames
    "Fd"  'delete-frame
    "Fm"  'toggle-frame-maximized
    "Fo"  'other-frame
    ;;
    "f" '(:ignore t :wk "File")
    "fD"  'counsel-dired-jump
    "fd"  'counsel-dired
    "ff"  'counsel-find-file  ;; visit or create file
    "fg"  'counsel-git        ;; find file in the current Git repo
    "fr"  'counsel-recentf    ;; find a file in recentf list
    "fR"  'ranger
    "fs"  'save-buffer
    ;;
    "g" '(:ignore t :wk "G")
    "gg"  'magit-status
    "gf"  'find-function
    "gv"  'find-variable
    ;;
    "i" '(:ignore t :wk "I")
    "ii"  'insert-char
    "iu"  'counsel-unicode-char
    "iy"  'counsel-yank-pop
    ;;
    "n" '(:ignore t :wk "Narrow")
    "nf"  'narrow-to-defun
    "np"  'narrow-to-page
    "nr"  'narrow-to-region
    "nw"  'widen
    ;;
    "o" '(:ignore t :wk "O")
    "oP"  '((lambda () (interactive) (org-publish-all t)) :wk "org publish all projects")
    "oT"  'org-babel-tangle-file
    "op"  'org-publish-current-file
    "ot"  'org-babel-tangle
    ;;
    "t" '(:ignore t :wk "T")
    "t."  'vterm
    "tF"  'toggle-frame-fullscreen
    "tn"  'centaur-tabs-forward
    "tp"  'centaur-tabs-backward
    "tr"  'counsel-evil-registers
    "tu"  'undo-tree-visualize
    ;;
    "w" '(:ignore t :wk "Window")
    "wB"  'balance-windows-area
    "wT"  'tear-off-window
    "wb"  'balance-windows
    "wd"  'kill-buffer-and-window
    "wh"  'evil-window-left
    "wj"  'evil-window-down
    "wk"  'evil-window-up
    "wl"  'evil-window-right
    "wo"  'delete-other-windows
    "wp"  'evil-window-prev
    "ws"  'evil-window-split
    "wv"  'evil-window-vsplit
    "ww"  'evil-window-next
    "wx"  'evil-window-delete
    ;;
    "x" '(:ignore t :wk "Text")
    "jj"  'json-pretty-print
    "jo"  'json-pretty-print-ordered
    "js"  'prettier-js-fmt-code
    "jS"  'standard-js-fmt-code
    "xh"  'mark-whole-buffer
    "xr"  'reverse-region
    "xs"  'counsel-grep-or-swiper
    "xx"  'delete-duplicate-lines
    "xl"  'sort-lines))
#+end_src

** Bling ✨

#+begin_src emacs-lisp
(use-package all-the-icons)

;; Top tabs
(use-package centaur-tabs
  :hook (after-init . centaur-tabs-mode)
  :init
  (setq centaur-tabs-height 26
        centaur-tabs-style "bar"
        centaur-tabs-set-bar 'over
        centaur-tabs-close-button "✕"
        centaur-tabs-modified-marker "•"
        centaur-tabs-gray-out-icons 'buffer
        centaur-tabs-set-modified-marker t)
  :bind
  (:map evil-normal-state-map
        ("g t" . centaur-tabs-forward-tab)
        ("g T" . centaur-tabs-backward-tab))
  :config
  (centaur-tabs-headline-match)
  (defun centaur-tabs-buffer-groups ()
    "`centaur-tabs-buffer-groups' control buffers' group rules."
    (list
     (cond
      ((or (string-equal "*" (substring (buffer-name) 0 1))
           (memq major-mode '(help-mode
                              helpful-mode
                              info-mode
                              man-mode)))
       "Emacs")
      ((or
        (derived-mode-p 'dired-mode)
        (derived-mode-p 'ranger-mode)
        (derived-mode-p 'image-mode))
       "Explore")
      ((or (derived-mode-p 'text-mode)
           (derived-mode-p 'prog-mode)
           (derived-mode-p 'conf-mode)
           (derived-mode-p 'org-mode)
           (memq major-mode '(org-src-mode
                              org-agenda-mode
                              org-beamer-mode
                              org-indent-mode
                              org-bullets-mode
                              org-cdlatex-mode)))
       "Editing")
      (t
       (centaur-tabs-get-group-name (current-buffer)))))
    ))

;; Bottom mode-line
(use-package doom-modeline
  :hook (after-init . doom-modeline-mode)
  :init
  (setq doom-modeline-height 24
        doom-modeline-gnus nil
        doom-modeline-irc nil
        doom-modeline-mu4e nil
        doom-modeline-time nil))

;; Dimm inactive buffers
(use-package dimmer
  :hook (after-init . dimmer-mode)
  :custom
  (dimmer-use-colorspace :rgb)
  (dimmer-adjustment-mode :both)
  :config
  (dimmer-configure-magit)
  (dimmer-configure-which-key))

;; Resolve symlinks when opening files
;; This MUST BE THE LAST PACKAGE
;; There are some issues with visit truename
;; https://github.com/raxod502/straight.el/issues/701
(use-feature files
  :init
  (setq require-final-newline t
        find-file-visit-truename t
        find-file-suppress-same-file-warnings t))
#+end_src

#+RESULTS:
: files

** Utils

#+begin_src emacs-lisp
;; Sorting: https://www.emacswiki.org/emacs/Sorting
;; From: https://www.emacswiki.org/emacs/SortWords
;;
(defun sort-words (reverse beg end)
  "Sort words in region alphabetically, in REVERSE if negative.
Prefixed with negative \\[universal-argument], sorts in reverse.
The variable `sort-fold-case' determines whether alphabetic case
affects the sort order."
  (interactive "*P\nr")
  (sort-regexp-fields reverse "\\w+" "\\&" beg end))

(defun sort-symbols (reverse beg end)
  "Sort symbols in region alphabetically, in REVERSE if negative."
  (interactive "*P\nr")
  (sort-regexp-fields reverse "\\(\\sw\\|\\s_\\)+" "\\&" beg end))

(defalias 'sw 'sort-words)
(defalias 'ss 'sort-symbols)

;; From: https://www.emacswiki.org/emacs/InsertingTodaysDate
;;
(defun date-now (arg)
  (interactive "P")
  (insert (if arg
              (format-time-string "%d.%m.%Y")
            (format-time-string "%Y-%m-%d"))))

(defun timestamp-now ()
  (interactive)
  (insert (format-time-string "%Y-%m-%d %H:%M:%S")))

(defalias 'dt 'date-now)
(defalias 'ts 'timestamp-now)

;; From: https://stackoverflow.com/questions/18812938/copy-full-file-path-into-copy-paste-clipboard
;;
(defun copy-file-name-as-kill (choice)
  "Copy the buffer file name to the kill-ring"
  (interactive "cCopy Buffer Name (F) Full, (D) Directory, (N) Name")
  (let ((new-kill-string)
        (name (if (eq major-mode 'dired-mode)
                  (dired-get-filename)
                (or (buffer-file-name) ""))))
    (cond ((eq choice ?f)
           (setq new-kill-string name))
          ((eq choice ?d)
           (setq new-kill-string (file-name-directory name)))
          ((eq choice ?n)
           (setq new-kill-string (file-name-nondirectory name)))
          (t (message "Quit")))
    (when new-kill-string
      (message "%s copied" new-kill-string)
      (kill-new new-kill-string))))
#+end_src

** Extra

#+begin_src emacs-lisp
;; Ask y/n instead of yes/no
(fset 'yes-or-no-p 'y-or-n-p)

;; All automatic custom config in a separate file
(setq custom-file (concat my-emacs-d "custom.el"))
(unless (file-exists-p custom-file)
  (write-region "" nil custom-file))
(load custom-file 'noerror)

;; Performance improvements
;; GC runs less often, which should speed up some operations
(add-hook 'after-init-hook
          (lambda ()
            (setq gc-cons-threshold 33554432 ; 32MB
                  gc-cons-percentage 0.2)
            (garbage-collect)))

;; Force GC to run when the focus moves away from Emacs
(add-hook 'focus-out-hook 'garbage-collect)

;; Display benchmark message at startup
(add-hook 'window-setup-hook
          (lambda ()
            (setq diff-init-time
                  (float-time (time-subtract (current-time) before-init-time)))
            (message "Emacs loaded %d packages in %s with %d garbage collections."
                     (- (length load-path) (length (get 'load-path 'initial-value)))
                     (format "%.2f seconds" diff-init-time)
                     gcs-done)))

;; THIS FILE IS TANGLED, DON'T EDIT
;;
;;; init.el ends here
#+end_src
